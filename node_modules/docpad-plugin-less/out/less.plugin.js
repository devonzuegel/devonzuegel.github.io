// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = function(BasePlugin) {
  var LessPlugin, _ref;
  return LessPlugin = (function(_super) {
    __extends(LessPlugin, _super);

    function LessPlugin() {
      _ref = LessPlugin.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    LessPlugin.prototype.name = 'less';

    LessPlugin.prototype.config = {
      compress: true,
      parseOptions: null,
      compileOptions: null,
      environments: {
        development: {
          compress: false
        }
      }
    };

    LessPlugin.prototype.render = function(opts, next) {
      var config, dirPath, file, inExtension, key, less, outExtension, parseOptions, path, srcPath, templateData, value, _ref1;
      config = this.config;
      inExtension = opts.inExtension, outExtension = opts.outExtension, templateData = opts.templateData, file = opts.file;
      if (inExtension === 'less' && (outExtension === 'css' || outExtension === null)) {
        path = require('path');
        less = require('less');
        srcPath = file.get('fullPath');
        dirPath = path.dirname(srcPath);
        parseOptions = {
          paths: [dirPath],
          filename: file.get('fullPath')
        };
        if (config.parseOptions) {
          _ref1 = config.parseOptions;
          for (key in _ref1) {
            if (!__hasProp.call(_ref1, key)) continue;
            value = _ref1[key];
            parseOptions[key] = value;
          }
        }
        return new less.Parser(parseOptions).parse(opts.content, function(err, tree) {
          var compileOptions, _ref2;
          if (err) {
            err = new Error(less.formatError(err, parseOptions));
            return next(err);
          }
          compileOptions = {
            compress: config.compress
          };
          if (config.compileOptions) {
            _ref2 = config.compileOptions;
            for (key in _ref2) {
              if (!__hasProp.call(_ref2, key)) continue;
              value = _ref2[key];
              compileOptions[key] = value;
            }
          }
          opts.content = tree.toCSS(compileOptions);
          return next();
        });
      } else {
        return next();
      }
    };

    return LessPlugin;

  })(BasePlugin);
};
